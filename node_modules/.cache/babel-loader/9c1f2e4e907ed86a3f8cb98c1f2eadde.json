{"ast":null,"code":"'use strict';\n\nvar is = require('is-type-of');\n\nvar nacl = require('./vendor/nacl');\n\nvar sjcl = require('./vendor/sjcl');\n\nvar KeyPair = require('./keypair');\n\nvar signature = {};\n/**\n * Generate the signature\n *\n * @param {String} message\n * @param {String} encPrivateKey\n * @returns {String}\n */\n\nsignature.sign = function (message, encPrivateKey) {\n  if (!message || !encPrivateKey) {\n    throw new Error('require message or encPrivateKey');\n  }\n\n  var privateKey = KeyPair.parsePrivateKey(encPrivateKey);\n\n  if (!is.array(privateKey)) {\n    throw new Error('private key format is incorrect.');\n  }\n\n  var keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n  var signBytes = nacl.sign.detached(message, keyPair.secretKey);\n  return sjcl.codec.hex.fromBits(sjcl.codec.bytes.toBits(signBytes));\n};\n/**\n * Verify the signature\n *\n * @param  {String} message\n * @param  {String} signature\n * @param  {Array} encPublicKey\n * @return {Boolean}\n */\n\n\nsignature.verify = function (message, signature, encPublicKey) {\n  if (!message || !signature || !encPublicKey) {\n    throw new Error('require message or signature or encPublicKey.');\n  }\n\n  var publicKey = KeyPair.parsePublicKey(encPublicKey);\n\n  if (!is.array(publicKey)) {\n    throw new Error('public key format is incorrect.');\n  }\n\n  var signatureBytes = sjcl.codec.bytes.fromBits(sjcl.codec.hex.toBits(signature));\n  return nacl.sign.detached.verify(message, signatureBytes, publicKey);\n};\n\nmodule.exports = signature;","map":null,"metadata":{},"sourceType":"script"}