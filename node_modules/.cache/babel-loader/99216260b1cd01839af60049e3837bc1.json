{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jesse/Desktop/blockx/BUMODapp/node_modules/@babel/runtime/regenerator\");\n\nvar wrap = require('co-wrap-all');\n\nvar is = require('is-type-of');\n\nvar merge = require('merge-descriptors');\n\nvar long = require('long');\n\nvar humps = require('humps');\n\nvar JSONbig = require('json-bigint');\n\nvar errors = require('../exception');\n\nmodule.exports = Transaction;\n\nfunction Transaction(options) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(options);\n  }\n\n  this.options = options;\n}\n\nvar proto = Transaction.prototype;\nmerge(proto, require('../common/util'));\n\nproto.buildBlob = function (args) {\n  try {\n    if (is.array(args) || !is.object(args)) {\n      return this._responseError(errors.INVALID_ARGUMENTS);\n    }\n\n    var schema = {\n      sourceAddress: {\n        required: true,\n        string: true,\n        address: true\n      },\n      gasPrice: {\n        required: true,\n        numeric: true\n      },\n      feeLimit: {\n        required: true,\n        numeric: true\n      },\n      nonce: {\n        required: true,\n        numeric: true\n      },\n      ceilLedgerSeq: {\n        required: false,\n        numeric: true\n      },\n      operations: {\n        required: true,\n        operations: true\n      },\n      metadata: {\n        required: false,\n        string: true\n      }\n    };\n\n    if (!this._validate(args, schema).tag) {\n      var msg = this._validate(args, schema).msg;\n\n      return this._responseError(errors[msg]);\n    }\n\n    return this._responseData(this._buildBlob(args));\n  } catch (err) {\n    throw err;\n  }\n};\n\nproto.sign = function (args) {\n  // privateKeys, blob\n  try {\n    if (is.array(args) || !is.object(args)) {\n      return this._responseError(errors.INVALID_ARGUMENTS);\n    }\n\n    var schema = {\n      privateKeys: {\n        required: true,\n        privateKeys: true\n      },\n      blob: {\n        required: true,\n        hex: true\n      }\n    };\n\n    if (!this._validate(args, schema).tag) {\n      var msg = this._validate(args, schema).msg;\n\n      return this._responseError(errors[msg]);\n    }\n\n    return this._responseData(this._signBlob(args));\n  } catch (err) {\n    throw err;\n  }\n}; // blob, signData, publicKey\n\n\nproto.submit =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee(args) {\n  var schema, msg;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(is.array(args) || !is.object(args))) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\", this._responseError(errors.INVALID_ARGUMENTS));\n\n        case 2:\n          // blob, signature\n          schema = {\n            signature: {\n              required: true,\n              signatures: true\n            },\n            blob: {\n              required: true,\n              hex: true\n            }\n          };\n\n          if (this._validate(args, schema).tag) {\n            _context.next = 6;\n            break;\n          }\n\n          msg = this._validate(args, schema).msg;\n          return _context.abrupt(\"return\", this._responseError(errors[msg]));\n\n        case 6:\n          args = humps.decamelizeKeys(args, {\n            separator: '_'\n          });\n          _context.next = 9;\n          return this._submit(args);\n\n        case 9:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, this);\n});\nproto.evaluateFee =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee2(args) {\n  var _this = this;\n\n  var sourceAddress, nonce, operations, signtureNumber, metadata, ceilLedgerSeq, schema, msg, operationList, data, response, info, fee;\n  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n\n          if (!(is.array(args) || !is.object(args))) {\n            _context2.next = 3;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", this._responseError(errors.INVALID_ARGUMENTS));\n\n        case 3:\n          sourceAddress = args.sourceAddress, nonce = args.nonce, operations = args.operations, signtureNumber = args.signtureNumber, metadata = args.metadata, ceilLedgerSeq = args.ceilLedgerSeq;\n          signtureNumber = signtureNumber || '1';\n          schema = {\n            sourceAddress: {\n              required: true,\n              string: true,\n              address: true\n            },\n            nonce: {\n              required: true,\n              string: true,\n              numeric: true\n            },\n            operations: {\n              required: true,\n              operations: true\n            },\n            signtureNumber: {\n              required: false,\n              string: true,\n              numeric: true\n            },\n            metadata: {\n              required: false,\n              string: true\n            },\n            ceilLedgerSeq: {\n              required: false,\n              numeric: true\n            }\n          };\n\n          if (this._validate(args, schema).tag) {\n            _context2.next = 9;\n            break;\n          }\n\n          msg = this._validate(args, schema).msg;\n          return _context2.abrupt(\"return\", this._responseError(errors[msg]));\n\n        case 9:\n          signtureNumber = signtureNumber || 1;\n          operationList = [];\n          operations.forEach(function (item) {\n            var type = item.type;\n            var argsData = item.data;\n\n            var operationItem = _this._buildOperation(type, argsData);\n\n            var operationMsg = humps.decamelizeKeys(operationItem, {\n              separator: '_'\n            }); // convert long to int\n\n            operationMsg = _this._longToInt(operationMsg);\n            operationList.push(operationMsg);\n          });\n          data = {\n            items: [{\n              transaction_json: {\n                source_address: sourceAddress,\n                metadata: metadata,\n                nonce: nonce,\n                operations: operationList,\n                ceil_ledger_seq: ceilLedgerSeq\n              }\n            }]\n          };\n          data = JSONbig.stringify(data);\n          _context2.next = 16;\n          return this._request('post', 'testTransaction', data);\n\n        case 16:\n          response = _context2.sent;\n\n          if (!is.object(response)) {\n            _context2.next = 24;\n            break;\n          }\n\n          info = response;\n\n          if (!(info.error_code === 0)) {\n            _context2.next = 23;\n            break;\n          }\n\n          if (!(info.result.txs && info.result.txs.length > 0)) {\n            _context2.next = 23;\n            break;\n          }\n\n          fee = info.result.txs[0].transaction_env.transaction;\n          return _context2.abrupt(\"return\", this._responseData({\n            feeLimit: fee.fee_limit,\n            gasPrice: fee.gas_price\n          }));\n\n        case 23:\n          return _context2.abrupt(\"return\", {\n            errorCode: info.error_code,\n            errorDesc: info.error_desc\n          });\n\n        case 24:\n          _context2.next = 29;\n          break;\n\n        case 26:\n          _context2.prev = 26;\n          _context2.t0 = _context2[\"catch\"](0);\n          throw _context2.t0;\n\n        case 29:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2, this, [[0, 26]]);\n});\nproto.getInfo =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee3(hash) {\n  var data;\n  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n\n          if (!(!is.string(hash) || this._isEmptyString(hash))) {\n            _context3.next = 3;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", this._responseError(errors.INVALID_HASH_ERROR));\n\n        case 3:\n          _context3.next = 5;\n          return this._request('get', 'getTransactionHistory', {\n            hash: hash\n          });\n\n        case 5:\n          data = _context3.sent;\n\n          if (!(data.error_code === 0)) {\n            _context3.next = 8;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", this._responseData(data.result));\n\n        case 8:\n          if (!(data.error_code === 4)) {\n            _context3.next = 10;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", this._responseError(errors.QUERY_RESULT_NOT_EXIST, data.result));\n\n        case 10:\n          return _context3.abrupt(\"return\", this._responseError(errors.FAIL));\n\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](0);\n          throw _context3.t0;\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _callee3, this, [[0, 13]]);\n});\nwrap(proto);","map":null,"metadata":{},"sourceType":"script"}