{"ast":null,"code":"'use strict';\n\nvar is = require('is-type-of');\n\nvar protobuf = require('protobufjs');\n\nvar long = require('long');\n\nvar tou8 = require('buffer-to-uint8array');\n/**\n * Account set metadata\n * @param args\n * @return {payload}\n */\n\n\nmodule.exports = function (args) {\n  try {\n    var key = args.key,\n        value = args.value,\n        version = args.version,\n        sourceAddress = args.sourceAddress,\n        deleteFlag = args.deleteFlag,\n        metadata = args.metadata;\n    var root = protobuf.Root.fromJSON(require('../../crypto/protobuf/bundle.json'));\n    var setMetadata = root.lookupType('protocol.OperationSetMetadata');\n    var opt = {\n      key: key,\n      value: value\n    };\n\n    if (version) {\n      opt.version = parseInt(version);\n    }\n\n    if (deleteFlag) {\n      opt.deleteFlag = deleteFlag;\n    }\n\n    var setMetadataMsg = setMetadata.create(opt);\n    var operation = root.lookupType('protocol.Operation');\n    var payload = {\n      setMetadata: setMetadataMsg,\n      type: operation.Type.SET_METADATA,\n      sourceAddress: sourceAddress\n    };\n\n    if (metadata) {\n      payload.metadata = metadata;\n    }\n\n    var err = operation.verify(payload);\n\n    if (err) {\n      throw Error(err);\n    }\n\n    return operation.create(payload);\n  } catch (err) {\n    throw err;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}