{"ast":null,"code":"'use strict';\n\nvar is = require('is-type-of');\n\nvar protobuf = require('protobufjs');\n\nvar long = require('long');\n\nvar errors = require('../../exception/errors');\n/**\n * Account set priviliege\n * @param args\n * @return {payload}\n */\n\n\nmodule.exports = function (args) {\n  try {\n    var sourceAddress = args.sourceAddress,\n        masterWeight = args.masterWeight,\n        txThreshold = args.txThreshold,\n        metadata = args.metadata,\n        signers = args.signers,\n        typeThresholds = args.typeThresholds;\n    var root = protobuf.Root.fromJSON(require('../../crypto/protobuf/bundle.json'));\n    var signersList = [];\n    var typeThresholdsList = [];\n    var signer = root.lookupType('protocol.Signer');\n\n    if (is.array(signers)) {\n      signers.forEach(function (item) {\n        var signerMsg = signer.create({\n          address: item.address,\n          weight: long.fromValue(item.weight)\n        });\n        signersList.push(signerMsg);\n      });\n    }\n\n    var typeThreshold = root.lookupType('protocol.OperationTypeThreshold');\n\n    if (is.array(typeThresholds)) {\n      typeThresholds.forEach(function (item) {\n        var typeThresholdMsg = typeThreshold.create({\n          type: parseInt(item.type),\n          threshold: long.fromValue(item.threshold)\n        });\n        typeThresholdsList.push(typeThresholdMsg);\n      });\n    }\n\n    var setPrivilege = root.lookupType('protocol.OperationSetPrivilege');\n    var opt = {};\n\n    if (masterWeight) {\n      opt.masterWeight = masterWeight;\n    }\n\n    if (txThreshold) {\n      opt.txThreshold = txThreshold;\n    }\n\n    if (signersList.length > 0) {\n      opt.signers = signersList;\n    }\n\n    if (typeThresholdsList.length > 0) {\n      opt.typeThresholds = typeThresholdsList;\n    }\n\n    var setPrivilegeMsg = setPrivilege.create(opt);\n    var operation = root.lookupType('protocol.Operation');\n    var payload = {\n      sourceAddress: sourceAddress,\n      type: operation.Type.SET_PRIVILEGE,\n      setPrivilege: setPrivilegeMsg\n    };\n\n    if (metadata) {\n      payload.metadata = metadata;\n    } // const err = operation.verify(payload);\n    //\n    // if (err) {\n    //   throw Error(err);\n    // }\n\n\n    return operation.create(payload);\n  } catch (err) {\n    throw err;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}