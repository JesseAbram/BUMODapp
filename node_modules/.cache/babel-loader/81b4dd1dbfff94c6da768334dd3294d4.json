{"ast":null,"code":"'use strict';\n\nvar is = require('is-type-of');\n\nvar protobuf = require('protobufjs');\n\nvar long = require('long');\n\nvar tou8 = require('buffer-to-uint8array');\n/**\n * contractInvokeByAsset operation\n * @param args\n * @return {object}\n */\n\n\nmodule.exports = function (args) {\n  try {\n    var sourceAddress = args.sourceAddress,\n        contractAddress = args.contractAddress,\n        code = args.code,\n        issuer = args.issuer,\n        assetAmount = args.assetAmount,\n        metadata = args.metadata,\n        input = args.input;\n    var root = protobuf.Root.fromJSON(require('../../crypto/protobuf/bundle.json'));\n    var assetKey = root.lookupType('protocol.AssetKey');\n    var assetKeyMsg = assetKey.create({\n      issuer: issuer,\n      code: code\n    });\n    var asset = root.lookupType('protocol.Asset');\n    var arg = {\n      key: assetKeyMsg\n    };\n\n    if (assetAmount) {\n      arg.amount = long.fromValue(assetAmount);\n    }\n\n    var assetMsg = asset.create(arg);\n    var operationPayAsset = root.lookupType('protocol.OperationPayAsset');\n    var opt = {\n      destAddress: contractAddress,\n      asset: assetMsg\n    };\n\n    if (input) {\n      opt.input = input;\n    }\n\n    var operationPayAssetMsg = operationPayAsset.create(opt);\n    var operation = root.lookupType('protocol.Operation');\n    var payload = {\n      payAsset: operationPayAssetMsg,\n      type: operation.Type.PAY_ASSET\n    };\n\n    if (sourceAddress) {\n      payload.sourceAddress = sourceAddress;\n    }\n\n    if (metadata) {\n      payload.metadata = metadata;\n    }\n\n    var err = operation.verify(payload);\n\n    if (err) {\n      throw Error(err);\n    }\n\n    return operation.create(payload);\n  } catch (err) {\n    throw err;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}