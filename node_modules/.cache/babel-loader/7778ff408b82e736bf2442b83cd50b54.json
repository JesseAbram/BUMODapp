{"ast":null,"code":"'use strict';\n\nvar is = require('is-type-of');\n\nvar errors = require('../exception');\n\nvar proto = exports;\n\nproto.assetIssueOperation = function (args) {\n  try {\n    if (is.array(args) || !is.object(args)) {\n      return this._responseError(errors.INVALID_ARGUMENTS);\n    }\n\n    var schema = {\n      sourceAddress: {\n        required: false,\n        address: true\n      },\n      code: {\n        required: true,\n        string: true\n      },\n      assetAmount: {\n        required: true,\n        numeric: true\n      },\n      metadata: {\n        required: false,\n        string: true\n      }\n    };\n\n    if (!this._validate(args, schema).tag) {\n      var msg = this._validate(args, schema).msg;\n\n      return this._responseError(errors[msg]);\n    }\n\n    if (args.sourceAddress && args.destAddress === args.sourceAddress) {\n      return this._responseError(errors.SOURCEADDRESS_EQUAL_DESTADDRESS_ERROR);\n    }\n\n    return this._responseData({\n      operation: {\n        type: 'issueAsset',\n        data: args\n      }\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n\nproto.assetSendOperation = function (args) {\n  try {\n    if (is.array(args) || !is.object(args)) {\n      return this._responseError(errors.INVALID_ARGUMENTS);\n    }\n\n    var schema = {\n      sourceAddress: {\n        required: false,\n        address: true\n      },\n      destAddress: {\n        required: true,\n        address: true\n      },\n      code: {\n        required: true,\n        string: true\n      },\n      issuer: {\n        required: true,\n        string: true,\n        address: true\n      },\n      assetAmount: {\n        required: true,\n        numeric: true\n      },\n      metadata: {\n        required: false,\n        string: true\n      }\n    };\n\n    if (!this._validate(args, schema).tag) {\n      var msg = this._validate(args, schema).msg;\n\n      return this._responseError(errors[msg]);\n    }\n\n    if (args.sourceAddress && args.destAddress === args.sourceAddress) {\n      return this._responseError(errors.SOURCEADDRESS_EQUAL_DESTADDRESS_ERROR);\n    }\n\n    return this._responseData({\n      operation: {\n        type: 'payAsset',\n        data: args\n      }\n    });\n  } catch (err) {\n    throw err;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}