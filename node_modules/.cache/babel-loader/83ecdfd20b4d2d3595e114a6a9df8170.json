{"ast":null,"code":"'use strict';\n\nvar merge = require('merge-descriptors');\n\nvar wrap = require('co-wrap-all');\n\nvar is = require('is-type-of');\n\nvar Util = require('./util');\n\nvar Account = require('./account');\n\nvar Token = require('./token');\n\nvar Block = require('./blockchain/block');\n\nvar Transaction = require('./blockchain/transaction');\n\nvar Operation = require('./operation');\n\nvar Contract = require('./contract');\n\nmodule.exports = BUMOSDK;\n\nfunction BUMOSDK(options) {\n  if (!(this instanceof BUMOSDK)) {\n    return new BUMOSDK(options);\n  }\n\n  if (options && options.inited) {\n    this.options = options;\n  } else {\n    this.options = BUMOSDK.initOptions(options);\n  }\n\n  this.util = new Util(this.options);\n  this.account = new Account(this.options);\n  this.transaction = new Transaction(this.options);\n  this.token = new Token(this.options);\n  this.block = new Block(this.options);\n  this.operation = new Operation(this.options);\n  this.contract = new Contract(this.options);\n}\n\nBUMOSDK.initOptions = function initOptions(options) {\n  if (!is.object(options)) {\n    throw new Error('options is require, it must be an object');\n  }\n\n  if (!is.string(options.host)) {\n    throw new Error('host must be a non-empty string');\n  }\n\n  var opts = {};\n  Object.keys(options).forEach(function (key) {\n    if (options[key] !== undefined) {\n      opts[key] = options[key];\n    }\n  });\n  opts.secure = opts.secure || false;\n  opts.inited = true;\n  return opts;\n};","map":null,"metadata":{},"sourceType":"script"}