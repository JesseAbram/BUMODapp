{"ast":null,"code":"'use strict';\n\nvar wrap = require('co-wrap-all');\n\nvar merge = require('merge-descriptors');\n\nvar BigNumber = require('bignumber.js');\n\nvar is = require('is-type-of');\n\nmodule.exports = Blob;\n\nfunction Blob(options) {\n  if (!(this instanceof Blob)) {\n    return new Blob(options);\n  }\n\n  this.options = options;\n}\n\nvar proto = Blob.prototype;\nmerge(proto, require('../common/util'));\n\nproto.isBigNumber = function (object) {\n  return this._isBigNumber(object);\n};\n\nproto.toBigNumber = function (data) {\n  return this._toBigNumber(data);\n};\n\nproto.utfToHex = function (str) {\n  if (!is.string(str)) {\n    return;\n  }\n\n  return Buffer.from(str, 'utf8').toString('hex');\n};\n\nproto.hexToUtf = function (str) {\n  if (!is.string(str) || str === '' || !this._isHexString(str)) {\n    return;\n  }\n\n  return Buffer.from(str, 'hex').toString('utf8');\n};\n\nproto.buToMo = function (bu) {\n  if (!this._verifyValue(bu)) {\n    return;\n  }\n\n  var oneMo = Math.pow(10, 8);\n  var mo = new BigNumber(bu).times(oneMo);\n  return mo.toString();\n};\n\nproto.moToBu = function (mo) {\n  if (!this._verifyValue(mo)) {\n    return;\n  }\n\n  var oneMo = Math.pow(10, 8);\n  var bu = new BigNumber(mo).dividedBy(oneMo);\n  return bu.toString();\n};\n\nwrap(proto);","map":null,"metadata":{},"sourceType":"script"}