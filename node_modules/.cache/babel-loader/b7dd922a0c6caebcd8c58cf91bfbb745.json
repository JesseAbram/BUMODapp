{"ast":null,"code":"'use strict';\n\nvar is = require('is-type-of');\n\nvar protobuf = require('protobufjs');\n\nvar long = require('long');\n\nvar ctp = require('../ctp');\n/**\n * ctp10TokenIssueOperation\n * @param args\n * @return {payload}\n */\n\n\nmodule.exports = function (args) {\n  try {\n    var initBalance = args.initBalance,\n        name = args.name,\n        symbol = args.symbol,\n        decimals = args.decimals,\n        totalSupply = args.totalSupply,\n        sourceAddress = args.sourceAddress,\n        metadata = args.metadata;\n    var root = protobuf.Root.fromJSON(require('../../crypto/protobuf/bundle.json'));\n    var contract = root.lookupType('protocol.Contract');\n    var contractMsg = contract.create({\n      payload: ctp.v10\n    });\n    var accountThreshold = root.lookupType('protocol.AccountThreshold');\n    var accountThresholdMsg = accountThreshold.create({\n      txThreshold: 1\n    });\n    var accountPrivilege = root.lookupType('protocol.AccountPrivilege');\n    var accountPrivilegeMsg = accountPrivilege.create({\n      // masterWeight: 0,\n      thresholds: accountThresholdMsg\n    });\n    var createAccount = root.lookupType('protocol.OperationCreateAccount');\n    var opt = {\n      initBalance: long.fromValue(initBalance),\n      priv: accountPrivilegeMsg,\n      contract: contractMsg\n    };\n    var initInputObj = {\n      params: {\n        name: name,\n        symbol: symbol,\n        decimals: decimals,\n        supply: totalSupply\n      }\n    };\n    opt.initInput = JSON.stringify(initInputObj);\n    var createAccountMsg = createAccount.create(opt);\n    var operation = root.lookupType('protocol.Operation');\n    var operationPayload = {\n      type: operation.Type.CREATE_ACCOUNT,\n      createAccount: createAccountMsg\n    };\n\n    if (sourceAddress) {\n      operationPayload.sourceAddress = sourceAddress;\n    }\n\n    if (metadata) {\n      operationPayload.metadata = metadata;\n    }\n\n    var err = operation.verify(operationPayload);\n\n    if (err) {\n      throw Error(err);\n    }\n\n    return operation.create(operationPayload);\n  } catch (err) {\n    throw err;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}