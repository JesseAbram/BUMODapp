{"ast":null,"code":"'use strict';\n\nvar is = require('is-type-of');\n\nvar protobuf = require('protobufjs');\n\nvar long = require('long');\n\nvar tou8 = require('buffer-to-uint8array');\n/**\n * createAccount operation: Activate Account\n * @param {string} args\n * @returns {string}\n */\n\n\nmodule.exports = function (args) {\n  try {\n    var sourceAddress = args.sourceAddress,\n        destAddress = args.destAddress,\n        initBalance = args.initBalance,\n        metadata = args.metadata;\n    var root = protobuf.Root.fromJSON(require('../../crypto/protobuf/bundle.json'));\n    var accountThreshold = root.lookupType('protocol.AccountThreshold');\n    var accountThresholdMsg = accountThreshold.create({\n      txThreshold: 1\n    });\n    var accountPrivilege = root.lookupType('protocol.AccountPrivilege');\n    var accountPrivilegeMsg = accountPrivilege.create({\n      masterWeight: 1,\n      thresholds: accountThresholdMsg\n    });\n    var createAccount = root.lookupType('protocol.OperationCreateAccount');\n    var createAccountMsg = createAccount.create({\n      destAddress: destAddress,\n      initBalance: long.fromValue(initBalance),\n      priv: accountPrivilegeMsg\n    });\n    var operation = root.lookupType('protocol.Operation');\n    var payload = {\n      createAccount: createAccountMsg,\n      type: operation.Type.CREATE_ACCOUNT,\n      sourceAddress: sourceAddress\n    };\n\n    if (metadata) {\n      payload.metadata = tou8(Buffer.from(metadata, 'utf8'));\n    }\n\n    var err = operation.verify(payload);\n\n    if (err) {\n      throw Error(err);\n    }\n\n    return operation.create(payload);\n  } catch (err) {\n    throw err;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}