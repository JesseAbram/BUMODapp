{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jesse/Desktop/blockx/BUMODapp/node_modules/@babel/runtime/regenerator\");\n\nvar is = require('is-type-of');\n\nvar co = require('co');\n\nvar errors = require('../exception');\n\nvar proto = exports;\n\nproto.ctp10TokenIssueOperation = function (args) {\n  try {\n    if (is.array(args) || !is.object(args)) {\n      return this._responseError(errors.INVALID_ARGUMENTS);\n    }\n\n    var schema = {\n      initBalance: {\n        required: true,\n        numeric: true\n      },\n      name: {\n        required: true,\n        string: true\n      },\n      symbol: {\n        required: true,\n        string: true\n      },\n      totalSupply: {\n        required: true,\n        numeric: true\n      },\n      sourceAddress: {\n        required: false,\n        string: true,\n        address: true\n      },\n      metadata: {\n        required: false,\n        string: true\n      }\n    };\n\n    if (!this._validate(args, schema).tag) {\n      var msg = this._validate(args, schema).msg;\n\n      return this._responseError(errors[msg]);\n    }\n\n    var decimals = args.decimals;\n\n    if (!decimals || typeof decimals !== 'number' || decimals < 0 || decimals > 8) {\n      return this._responseError(errors.INVALID_TOKEN_DECIMALS_ERROR);\n    }\n\n    return this._responseData({\n      operation: {\n        type: 'ctp10TokenIssue',\n        data: args\n      }\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n\nproto.ctp10TokenAssignOperation =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee(args) {\n  var schema, msg, isContractAddress, tokenInfo;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n\n          if (!(is.array(args) || !is.object(args))) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\", this._responseError(errors.INVALID_ARGUMENTS));\n\n        case 3:\n          schema = {\n            contractAddress: {\n              required: true,\n              address: true\n            },\n            destAddress: {\n              required: true,\n              address: true\n            },\n            tokenAmount: {\n              required: true,\n              numeric: true\n            },\n            sourceAddress: {\n              required: false,\n              address: true\n            },\n            metadata: {\n              required: false,\n              string: true\n            }\n          };\n\n          if (this._validate(args, schema).tag) {\n            _context.next = 7;\n            break;\n          }\n\n          msg = this._validate(args, schema).msg;\n          return _context.abrupt(\"return\", this._responseError(errors[msg]));\n\n        case 7:\n          _context.next = 9;\n          return this._isContractAddress(args.contractAddress);\n\n        case 9:\n          isContractAddress = _context.sent;\n\n          if (isContractAddress) {\n            _context.next = 12;\n            break;\n          }\n\n          return _context.abrupt(\"return\", this._responseError(errors.CONTRACTADDRESS_NOT_CONTRACTACCOUNT_ERROR));\n\n        case 12:\n          if (!(args.sourceAddress && args.destAddress === args.sourceAddress)) {\n            _context.next = 14;\n            break;\n          }\n\n          return _context.abrupt(\"return\", this._responseError(errors.SOURCEADDRESS_EQUAL_DESTADDRESS_ERROR));\n\n        case 14:\n          if (!(args.sourceAddress && args.contractAddress === args.sourceAddress)) {\n            _context.next = 16;\n            break;\n          }\n\n          return _context.abrupt(\"return\", this._responseError(errors.SOURCEADDRESS_EQUAL_CONTRACTADDRESS_ERROR));\n\n        case 16:\n          _context.next = 18;\n          return this._isAvailableToken(args.contractAddress);\n\n        case 18:\n          tokenInfo = _context.sent;\n\n          if (tokenInfo.result.isValid) {\n            _context.next = 21;\n            break;\n          }\n\n          return _context.abrupt(\"return\", this._responseError(errors.NO_SUCH_TOKEN_ERROR));\n\n        case 21:\n          return _context.abrupt(\"return\", this._responseData({\n            operation: {\n              type: 'ctp10TokenAssign',\n              data: args\n            }\n          }));\n\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](0);\n          throw _context.t0;\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, this, [[0, 24]]);\n});\nproto.ctp10TokenTransferOperation =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee2(args) {\n  var schema, msg, isContractAddress, tokenInfo;\n  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n\n          if (!(is.array(args) || !is.object(args))) {\n            _context2.next = 3;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", this._responseError(errors.INVALID_ARGUMENTS));\n\n        case 3:\n          schema = {\n            contractAddress: {\n              required: true,\n              address: true\n            },\n            destAddress: {\n              required: true,\n              address: true\n            },\n            tokenAmount: {\n              required: true,\n              numeric: true\n            },\n            sourceAddress: {\n              required: false,\n              address: true\n            },\n            metadata: {\n              required: false,\n              string: true\n            }\n          };\n\n          if (this._validate(args, schema).tag) {\n            _context2.next = 7;\n            break;\n          }\n\n          msg = this._validate(args, schema).msg;\n          return _context2.abrupt(\"return\", this._responseError(errors[msg]));\n\n        case 7:\n          _context2.next = 9;\n          return this._isContractAddress(args.contractAddress);\n\n        case 9:\n          isContractAddress = _context2.sent;\n\n          if (isContractAddress) {\n            _context2.next = 12;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", this._responseError(errors.CONTRACTADDRESS_NOT_CONTRACTACCOUNT_ERROR));\n\n        case 12:\n          if (!(args.sourceAddress && args.destAddress === args.sourceAddress)) {\n            _context2.next = 14;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", this._responseError(errors.SOURCEADDRESS_EQUAL_DESTADDRESS_ERROR));\n\n        case 14:\n          if (!(args.sourceAddress && args.contractAddress === args.sourceAddress)) {\n            _context2.next = 16;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", this._responseError(errors.SOURCEADDRESS_EQUAL_CONTRACTADDRESS_ERROR));\n\n        case 16:\n          _context2.next = 18;\n          return this._isAvailableToken(args.contractAddress);\n\n        case 18:\n          tokenInfo = _context2.sent;\n\n          if (tokenInfo.result.isValid) {\n            _context2.next = 21;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", this._responseError(errors.NO_SUCH_TOKEN_ERROR));\n\n        case 21:\n          return _context2.abrupt(\"return\", this._responseData({\n            operation: {\n              type: 'ctp10TokenTransfer',\n              data: args\n            }\n          }));\n\n        case 24:\n          _context2.prev = 24;\n          _context2.t0 = _context2[\"catch\"](0);\n          throw _context2.t0;\n\n        case 27:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2, this, [[0, 24]]);\n});\nproto.ctp10TokenTransferFromOperation =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee3(args) {\n  var schema, msg, isContractAddress, tokenInfo;\n  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n\n          if (!(is.array(args) || !is.object(args))) {\n            _context3.next = 3;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", this._responseError(errors.INVALID_ARGUMENTS));\n\n        case 3:\n          schema = {\n            contractAddress: {\n              required: true,\n              address: true\n            },\n            fromAddress: {\n              required: true,\n              address: true\n            },\n            destAddress: {\n              required: true,\n              address: true\n            },\n            tokenAmount: {\n              required: true,\n              numeric: true\n            },\n            sourceAddress: {\n              required: false,\n              address: true\n            },\n            metadata: {\n              required: false,\n              string: true\n            }\n          };\n\n          if (this._validate(args, schema).tag) {\n            _context3.next = 7;\n            break;\n          }\n\n          msg = this._validate(args, schema).msg;\n          return _context3.abrupt(\"return\", this._responseError(errors[msg]));\n\n        case 7:\n          if (!(args.fromAddress === args.destAddress)) {\n            _context3.next = 9;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", this._responseError(errors.FROMADDRESS_EQUAL_DESTADDRESS_ERROR));\n\n        case 9:\n          _context3.next = 11;\n          return this._isContractAddress(args.contractAddress);\n\n        case 11:\n          isContractAddress = _context3.sent;\n\n          if (isContractAddress) {\n            _context3.next = 14;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", this._responseError(errors.CONTRACTADDRESS_NOT_CONTRACTACCOUNT_ERROR));\n\n        case 14:\n          if (!(args.sourceAddress && args.destAddress === args.sourceAddress)) {\n            _context3.next = 16;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", this._responseError(errors.SOURCEADDRESS_EQUAL_DESTADDRESS_ERROR));\n\n        case 16:\n          if (!(args.sourceAddress && args.contractAddress === args.sourceAddress)) {\n            _context3.next = 18;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", this._responseError(errors.SOURCEADDRESS_EQUAL_CONTRACTADDRESS_ERROR));\n\n        case 18:\n          _context3.next = 20;\n          return this._isAvailableToken(args.contractAddress);\n\n        case 20:\n          tokenInfo = _context3.sent;\n\n          if (tokenInfo.result.isValid) {\n            _context3.next = 23;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", this._responseError(errors.NO_SUCH_TOKEN_ERROR));\n\n        case 23:\n          return _context3.abrupt(\"return\", this._responseData({\n            operation: {\n              type: 'ctp10TokenTransferFrom',\n              data: args\n            }\n          }));\n\n        case 26:\n          _context3.prev = 26;\n          _context3.t0 = _context3[\"catch\"](0);\n          throw _context3.t0;\n\n        case 29:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _callee3, this, [[0, 26]]);\n});\nproto.ctp10TokenApproveOperation =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee4(args) {\n  var schema, msg, isContractAddress, tokenInfo;\n  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n\n          if (!(is.array(args) || !is.object(args))) {\n            _context4.next = 3;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", this._responseError(errors.INVALID_ARGUMENTS));\n\n        case 3:\n          schema = {\n            contractAddress: {\n              required: true,\n              address: true\n            },\n            spender: {\n              required: true,\n              address: true\n            },\n            tokenAmount: {\n              required: true,\n              numeric: true\n            },\n            sourceAddress: {\n              required: false,\n              address: true\n            },\n            metadata: {\n              required: false,\n              string: true\n            }\n          };\n\n          if (this._validate(args, schema).tag) {\n            _context4.next = 7;\n            break;\n          }\n\n          msg = this._validate(args, schema).msg;\n          return _context4.abrupt(\"return\", this._responseError(errors[msg]));\n\n        case 7:\n          if (!(args.contractAddress === args.sourceAddress)) {\n            _context4.next = 9;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", this._responseError(errors.SOURCEADDRESS_EQUAL_CONTRACTADDRESS_ERROR));\n\n        case 9:\n          _context4.next = 11;\n          return this._isContractAddress(args.contractAddress);\n\n        case 11:\n          isContractAddress = _context4.sent;\n\n          if (isContractAddress) {\n            _context4.next = 14;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", this._responseError(errors.CONTRACTADDRESS_NOT_CONTRACTACCOUNT_ERROR));\n\n        case 14:\n          _context4.next = 16;\n          return this._isAvailableToken(args.contractAddress);\n\n        case 16:\n          tokenInfo = _context4.sent;\n\n          if (tokenInfo.result.isValid) {\n            _context4.next = 19;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", this._responseError(errors.NO_SUCH_TOKEN_ERROR));\n\n        case 19:\n          return _context4.abrupt(\"return\", this._responseData({\n            operation: {\n              type: 'ctp10TokenApprove',\n              data: args\n            }\n          }));\n\n        case 22:\n          _context4.prev = 22;\n          _context4.t0 = _context4[\"catch\"](0);\n          throw _context4.t0;\n\n        case 25:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _callee4, this, [[0, 22]]);\n});\nproto.ctp10TokenChangeOwnerOperation =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee5(args) {\n  var schema, msg, isContractAddress, tokenInfo;\n  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n\n          if (!(is.array(args) || !is.object(args))) {\n            _context5.next = 3;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", this._responseError(errors.INVALID_ARGUMENTS));\n\n        case 3:\n          schema = {\n            contractAddress: {\n              required: true,\n              address: true\n            },\n            tokenOwner: {\n              required: true,\n              address: true\n            },\n            sourceAddress: {\n              required: false,\n              address: true\n            },\n            metadata: {\n              required: false,\n              string: true\n            }\n          };\n\n          if (this._validate(args, schema).tag) {\n            _context5.next = 7;\n            break;\n          }\n\n          msg = this._validate(args, schema).msg;\n          return _context5.abrupt(\"return\", this._responseError(errors[msg]));\n\n        case 7:\n          if (!(args.contractAddress === args.sourceAddress)) {\n            _context5.next = 9;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", this._responseError(errors.SOURCEADDRESS_EQUAL_CONTRACTADDRESS_ERROR));\n\n        case 9:\n          _context5.next = 11;\n          return this._isContractAddress(args.contractAddress);\n\n        case 11:\n          isContractAddress = _context5.sent;\n\n          if (isContractAddress) {\n            _context5.next = 14;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", this._responseError(errors.CONTRACTADDRESS_NOT_CONTRACTACCOUNT_ERROR));\n\n        case 14:\n          _context5.next = 16;\n          return this._isAvailableToken(args.contractAddress);\n\n        case 16:\n          tokenInfo = _context5.sent;\n\n          if (tokenInfo.result.isValid) {\n            _context5.next = 19;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", this._responseError(errors.NO_SUCH_TOKEN_ERROR));\n\n        case 19:\n          return _context5.abrupt(\"return\", this._responseData({\n            operation: {\n              type: 'ctp10TokenChangeOwner',\n              data: args\n            }\n          }));\n\n        case 22:\n          _context5.prev = 22;\n          _context5.t0 = _context5[\"catch\"](0);\n          throw _context5.t0;\n\n        case 25:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _callee5, this, [[0, 22]]);\n});","map":null,"metadata":{},"sourceType":"script"}