{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jesse/Desktop/blockx/BUMODapp/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jesse/Desktop/blockx/BUMODapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this;\n\nimport BumoSDK from 'bumo-sdk';\nvar sdk = new BumoSDK({\n  host: '192.168.33.10:36002'\n});\nexport var handleAccountCreation =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(e) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _this.refs.btn.setAttribute(\"disabled\", \"disabled\");\n\n            sdk.account.create().then(function (data) {\n              console.log(data);\n              var address = data.result.address;\n\n              _this.setState({\n                address: JSON.stringify(address)\n              });\n\n              var privateKey = data.result.privateKey;\n\n              _this.setState({\n                privateKey: JSON.stringify(privateKey)\n              });\n            }).catch(function (err) {\n              console.log(err.message);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function handleAccountCreation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var handleFundAccount =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(e) {\n    var BumoSDK, sdk, operationInfo, operationItem, nonce, blobInfo, blob, blobHexFormat;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            BumoSDK = require('bumo-sdk');\n            sdk = new BumoSDK({\n              host: 'seed1.bumotest.io:26002'\n            });\n            operationInfo = sdk.operation.buSendOperation({\n              destAddress: 'buQnVFqm1LPjPbip5SLBBG6Ke96qmVs4zBw7',\n              buAmount: '100000000',\n              //write about\n              metadata: '746573742073656e64206275'\n            });\n\n            if (!(operationInfo.errorCode !== 0)) {\n              _context2.next = 6;\n              break;\n            }\n\n            console.log(operationInfo);\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            operationItem = operationInfo.result.operation;\n            console.log(operationItem);\n            nonce = String(_this.state.nonce);\n            console.log(nonce);\n            blobInfo = sdk.transaction.buildBlob({\n              sourceAddress: 'buQgvdDfUjmK56K73ba8kqnE1d8azzCRYM9G',\n              gasPrice: '1000',\n              feeLimit: '306000',\n              nonce: nonce,\n              operations: [operationItem]\n            });\n            console.log(blobInfo.errorCode);\n\n            if (!(blobInfo.errorCode !== 0)) {\n              _context2.next = 15;\n              break;\n            }\n\n            console.log(blobInfo.toString());\n            return _context2.abrupt(\"return\");\n\n          case 15:\n            blob = blobInfo.result.transactionBlob;\n            console.log(blob);\n            blobHexFormat = _this.convertToHex(blob);\n\n            _this.setState({\n              blob: blobHexFormat\n            });\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function handleFundAccount(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/jesse/Desktop/blockx/BUMODapp/src/utils.js"],"names":["BumoSDK","sdk","host","handleAccountCreation","e","refs","btn","setAttribute","account","create","then","data","console","log","address","result","setState","JSON","stringify","privateKey","catch","err","message","handleFundAccount","require","operationInfo","operation","buSendOperation","destAddress","buAmount","metadata","errorCode","operationItem","nonce","String","state","blobInfo","transaction","buildBlob","sourceAddress","gasPrice","feeLimit","operations","toString","blob","transactionBlob","blobHexFormat","convertToHex"],"mappings":"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","sourcesContent":["import BumoSDK from 'bumo-sdk';\n\n\n\nconst sdk = new BumoSDK({\n  host: '192.168.33.10:36002',\n})\n\n\nexport const handleAccountCreation = async (e) => {\n  this.refs.btn.setAttribute(\"disabled\", \"disabled\");\n\n  sdk.account.create().then(data => {\n    console.log(data)\n    var address = data.result.address;\n    this.setState({ address: JSON.stringify(address) })\n    var privateKey = data.result.privateKey;\n    this.setState({ privateKey: JSON.stringify(privateKey) })\n  }).catch(err => {\n    console.log(err.message)\n  });\n}\n\n\n\n\nexport const  handleFundAccount = async (e) => {\n\n  const BumoSDK = require('bumo-sdk');\n\n  const sdk = new BumoSDK({\n    host: 'seed1.bumotest.io:26002',\n  });\n\n\n\n  const operationInfo = sdk.operation.buSendOperation({\n    destAddress: 'buQnVFqm1LPjPbip5SLBBG6Ke96qmVs4zBw7',\n    buAmount: '100000000', //write about\n    metadata: '746573742073656e64206275',\n  });\n\n\n  if (operationInfo.errorCode !== 0) {\n    console.log(operationInfo);\n    return;\n  }\n\n\n  const operationItem = operationInfo.result.operation;\n\n  console.log(operationItem);\n \n  const nonce = String(this.state.nonce)\n  console.log(nonce);\n\n  const blobInfo = sdk.transaction.buildBlob({\n    sourceAddress: 'buQgvdDfUjmK56K73ba8kqnE1d8azzCRYM9G',\n    gasPrice: '1000',\n    feeLimit: '306000',\n    nonce,\n    operations: [operationItem],\n\n  });\n\n  console.log(blobInfo.errorCode);\n\n  if (blobInfo.errorCode !== 0) {\n    console.log(blobInfo.toString());\n    return;\n  }\n\n\n\n  const blob = blobInfo.result.transactionBlob;\n  console.log(blob);\n  const blobHexFormat = this.convertToHex(blob)\n  this.setState({ blob: blobHexFormat })\n\n    \n\n\n}\n"]},"metadata":{},"sourceType":"module"}