{"ast":null,"code":"'use strict';\n\nvar sjcl = require('sjcl');\n\nvar is = require('is-type-of');\n\nvar CryptoJS = require('crypto-js');\n\nvar scrypt = require('./vendor/scrypt');\n\nvar Crypto = scrypt.Crypto;\nvar Crypto_scrypt = scrypt.Crypto_scrypt;\nvar keystore = {};\n/**\n * Encrypt private key, get keystore json object\n * If encPrivateKey was null, return a new one, otherwise return itself\n *\n * @param {String} encPrivateKey\n * @param {String} password\n * @param {function} callback\n */\n\nkeystore.encrypt = function (encPrivateKey, password, callback) {\n  // n is CPU cost parameter, if n is null, the default value is 16384\n  var n = 16384; // r is memory cost parameter, if r is null, the default value is 8\n\n  var r = 8; // p is parallelization parameter, if p is null, the default value is 1\n\n  var p = 1;\n  var dkLen = 32;\n  var salt = sjcl.random.randomWords(32);\n  var iv = sjcl.random.randomWords(16);\n  Crypto_scrypt(password, salt, n, r, p, dkLen, function (dk) {\n    var key = Crypto.util.bytesToHex(dk);\n    var encrypted = CryptoJS.AES.encrypt(encPrivateKey, key, {\n      iv: iv,\n      mode: CryptoJS.mode.CTR,\n      padding: CryptoJS.pad.NoPadding\n    });\n    var obj = {\n      encrypted: encrypted,\n      salt: salt,\n      iv: iv\n    };\n    callback(obj);\n  });\n};\n/**\n * Get private key by keystore\n *\n * @param  {Object}   keystore\n * @param  {String}   password\n * @param  {Function} callback\n * @return {String}\n */\n\n\nkeystore.decrypt = function (keystore, password, callback) {\n  if (!keystore) {\n    throw new Error('require kestore');\n  }\n\n  if (!is.object(keystore)) {\n    throw new TypeError('the type of `keystore must object.`');\n  }\n\n  if (!password) {\n    throw new Error('require password');\n  } // n is CPU cost parameter, if n is null, the default value is 16384\n\n\n  var n = 16384; // r is memory cost parameter, if r is null, the default value is 8\n\n  var r = 8; // p is parallelization parameter, if p is null, the default value is 1\n\n  var p = 1;\n  var dkLen = 32;\n  var encrypted = keystore.encrypted;\n  var salt = keystore.salt;\n  var iv = keystore.iv;\n  Crypto_scrypt(password, salt, n, r, p, dkLen, function (dk) {\n    var key = Crypto.util.bytesToHex(dk);\n    var decrypted = CryptoJS.AES.decrypt(encrypted, key, {\n      mode: CryptoJS.mode.CTR,\n      iv: iv,\n      padding: CryptoJS.pad.NoPadding\n    });\n    var privateKey = decrypted.toString(CryptoJS.enc.Utf8);\n    callback(privateKey);\n  });\n};\n\nmodule.exports = keystore;","map":null,"metadata":{},"sourceType":"script"}