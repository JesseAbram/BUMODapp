{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jesse/Desktop/blockx/bumodapp/node_modules/@babel/runtime/regenerator\");\n\nvar request = require('request-promise');\n\nvar is = require('is-type-of');\n\nvar long = require('long');\n\nvar JSONbig = require('json-bigint'); // const bigNumberToString = require('bignumber-to-string')\n\n\nvar BigNumber = require('bignumber.js');\n\nvar protobuf = require(\"protobufjs\");\n\nvar tou8 = require('buffer-to-uint8array');\n\nvar humps = require('humps');\n\nvar _require = require('bumo-encryption'),\n    keypair = _require.keypair,\n    signature = _require.signature;\n\nvar errors = require('../exception');\n\nvar proto = exports;\n/**\n * GET/POST request\n *\n * @param  {String} method\n * @param  {String} path\n * @param  {Object} data\n * @return {Object}\n */\n\nproto._request =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee(method, path) {\n  var data,\n      protocol,\n      uri,\n      methods,\n      options,\n      result,\n      obj,\n      error_code,\n      final,\n      _args = arguments;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          data = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n          _context.prev = 1;\n          protocol = this.options.secure ? 'https://' : 'http://';\n          uri = \"\".concat(protocol).concat(this.options.host, \"/\").concat(path);\n\n          if (!(!is.string(method) || this._isEmptyString(method))) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new Error('method must be a non-empty string');\n\n        case 6:\n          if (!(!is.string(path) || this._isEmptyString(path))) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error('path must be a non-empty string');\n\n        case 8:\n          methods = ['get', 'post'];\n\n          if (methods.includes(method.toLowerCase())) {\n            _context.next = 11;\n            break;\n          }\n\n          throw new Error(\"\".concat(method, \" http method is not supported\"));\n\n        case 11:\n          options = {\n            method: method,\n            uri: uri\n          };\n\n          if (method === 'get') {\n            options.qs = data;\n          }\n\n          if (method === 'post') {\n            options.body = data;\n          }\n\n          _context.next = 16;\n          return request(options);\n\n        case 16:\n          result = _context.sent;\n          obj = JSONbig.parse(result);\n          error_code = obj.error_code;\n          final = this._bigNumberToString(obj);\n          final.error_code = error_code;\n          return _context.abrupt(\"return\", final);\n\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](1);\n          throw _context.t0;\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, this, [[1, 24]]);\n});\n\nproto._response = function (obj) {\n  var data = {\n    errorCode: obj.error_code || 0,\n    errorDesc: obj.error_desc || 'Success'\n  };\n\n  if (is.object(obj) && obj.error_code) {\n    if (obj.error_code === 0) {\n      data.result = obj.result || {};\n    } else {\n      data.errorDesc = obj.error_desc || '';\n      data.result = {};\n    }\n  } else {\n    data.result = obj;\n  }\n\n  return JSONbig.stringify(data);\n};\n\nproto._getBlockNumber =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee2() {\n  var data, seq;\n  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return this._request('get', 'getLedger');\n\n        case 3:\n          data = _context2.sent;\n\n          if (!(data && data.error_code === 0)) {\n            _context2.next = 9;\n            break;\n          }\n\n          seq = data.result.header.seq;\n          return _context2.abrupt(\"return\", this._responseData({\n            header: {\n              blockNumber: seq\n            }\n          }));\n\n        case 9:\n          return _context2.abrupt(\"return\", this._responseError(errors.INTERNAL_ERROR));\n\n        case 10:\n          _context2.next = 15;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](0);\n          throw _context2.t0;\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2, this, [[0, 12]]);\n});\n\nproto._isEmptyString = function (str) {\n  if (!is.string(str)) {\n    throw new Error('str must be a string');\n  }\n\n  return str.trim().length === 0;\n};\n\nproto._postData = function (blob, signature) {\n  var data = {\n    items: [{\n      transaction_blob: blob,\n      signatures: signature\n    }]\n  };\n  return JSONbig.stringify(data);\n};\n\nproto._isBigNumber = function (object) {\n  return object instanceof BigNumber || object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\nproto._toBigNumber = function (number) {\n  number = number || 0; //\n\n  if (this._isBigNumber(number)) {\n    return number;\n  }\n\n  return new BigNumber(number);\n};\n\nproto._stringFromBigNumber = function (number) {\n  return this._toBigNumber(number).toString(10);\n};\n\nproto._verifyValue = function (str) {\n  var reg = /^[1-9]\\d*$/;\n  return is.string(str) && reg.test(str) && long.fromValue(str).greaterThan(0) && long.fromValue(str).lessThanOrEqual(long.MAX_VALUE);\n};\n\nproto._isAvailableValue = function (str) {\n  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : long.MAX_VALUE;\n  var reg = /^[0-9]\\d*$/;\n  return is.string(str) && reg.test(str) && long.fromValue(str).greaterThan(from) && long.fromValue(str).lessThanOrEqual(to);\n};\n\nproto._checkParams = function (obj) {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      var value = obj[prop];\n\n      if (!is.undefined(value)) {\n        if (!this._verifyValue(value)) {\n          throw new Error(errors.INVALID_FORMAT_OF_ARG.msg);\n        }\n      }\n    }\n  }\n};\n\nproto._getDefaultValue =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee3() {\n  var ledgerInfo, gasPrice, feeLimit;\n  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return this._request('get', 'getLedger', {\n            with_fee: true\n          });\n\n        case 3:\n          ledgerInfo = _context3.sent;\n          gasPrice = long.fromValue(ledgerInfo.result.fees.gas_price);\n          feeLimit = long.fromValue(1000).mul(gasPrice);\n          return _context3.abrupt(\"return\", {\n            gasPrice: gasPrice,\n            feeLimit: feeLimit\n          });\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          throw _context3.t0;\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _callee3, this, [[0, 9]]);\n});\n\nproto._responseData = function (data) {\n  var errorCode = 0;\n  var errorDesc = '';\n  return {\n    errorCode: errorCode,\n    errorDesc: errorDesc,\n    result: data\n  };\n};\n\nproto._responseError = function (message) {\n  if (!message) {\n    throw new Error('require message');\n  }\n\n  var errorCode = message.CODE;\n  return {\n    errorCode: errorCode,\n    errorDesc: message.MSG\n  };\n};\n\nproto._submitTransaction =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee4(data) {\n  var res, results, info;\n  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return this._request('post', 'submitTransaction', data);\n\n        case 3:\n          res = _context4.sent;\n          results = res.results;\n\n          if (!(Array.isArray(results) && results.length > 0)) {\n            _context4.next = 10;\n            break;\n          }\n\n          info = results[0];\n\n          if (!(info.error_code === '0')) {\n            _context4.next = 9;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", this._responseData({\n            hash: info.hash\n          }));\n\n        case 9:\n          return _context4.abrupt(\"return\", {\n            errorCode: info.error_code,\n            errorDesc: info.error_desc\n          });\n\n        case 10:\n          _context4.next = 15;\n          break;\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](0);\n          throw _context4.t0;\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _callee4, this, [[0, 12]]);\n});\n\nproto._buildOperation = function (type, data) {\n  try {\n    return require(\"./operation/\".concat(type))(data);\n  } catch (err) {\n    console.log(err);\n    throw new Error('Operation cannot be resolved');\n  }\n};\n\nproto._decodeOperation = function (hexString) {\n  var root = protobuf.Root.fromJSON(require('../crypto/protobuf/bundle.json'));\n  var operation = root.lookupType('protocol.Operation');\n  var msgBuffer = Buffer.from(hexString, 'hex');\n  return operation.decode(msgBuffer);\n};\n\nproto._buildBlob = function (args) {\n  var _this = this;\n\n  try {\n    var sourceAddress = args.sourceAddress,\n        gasPrice = args.gasPrice,\n        feeLimit = args.feeLimit,\n        nonce = args.nonce,\n        ceilLedgerSeq = args.ceilLedgerSeq,\n        operations = args.operations,\n        metadata = args.metadata;\n    var operationList = [];\n    operations.forEach(function (item) {\n      var type = item.type;\n      var argsData = item.data;\n\n      var operationItem = _this._buildOperation(type, argsData);\n\n      operationList.push(operationItem);\n    });\n    var root = protobuf.Root.fromJSON(require('../crypto/protobuf/bundle.json'));\n    var tx = root.lookupType('protocol.Transaction');\n    ceilLedgerSeq = ceilLedgerSeq ? long.fromValue(ceilLedgerSeq) : undefined;\n    var payload = {\n      sourceAddress: sourceAddress,\n      gasPrice: long.fromValue(gasPrice),\n      feeLimit: long.fromValue(feeLimit),\n      nonce: long.fromValue(nonce),\n      ceilLedgerSeq: ceilLedgerSeq,\n      operations: operationList // metadata,\n\n    };\n\n    if (metadata) {\n      // payload.metadata = tou8(Buffer.from(metadata, 'hex'));\n      payload.metadata = metadata;\n    }\n\n    var errMsg = tx.verify(payload);\n\n    if (errMsg) {\n      throw Error(errMsg);\n    }\n\n    var message = tx.create(payload);\n    var bufferData = tx.encode(message).finish();\n    return {\n      transactionBlob: bufferData.toString('hex')\n    };\n  } catch (err) {\n    throw err;\n  }\n};\n\nproto._signBlob = function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : args,\n      privateKeys = _ref.privateKeys,\n      blob = _ref.blob;\n\n  try {\n    var buffer = Buffer.from(blob, 'hex');\n    var uint8ArrayData = tou8(buffer);\n    var signatureArr = [];\n    privateKeys.forEach(function (privateKey) {\n      signatureArr.push({\n        signData: signature.sign(uint8ArrayData, privateKey),\n        publicKey: keypair.getEncPublicKey(privateKey)\n      });\n    }); // return signatureArr;\n\n    return {\n      signatures: signatureArr\n    };\n  } catch (err) {\n    throw err;\n  }\n};\n\nproto._submit =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee5(args) {\n  var blob, signature, postData;\n  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          blob = args.blob, signature = args.signature;\n          postData = this._postData(blob, signature);\n          _context5.next = 4;\n          return this._submitTransaction(postData);\n\n        case 4:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _callee5, this);\n});\n\nproto._isHexString = function (str) {\n  if (str === '' || !is.string(str)) {\n    return false;\n  }\n\n  var hexString = Buffer.from(str, 'hex').toString('hex');\n  return hexString === str;\n};\n\nproto._isString = function (str) {\n  if (!is.string(str) || str.trim().length === 0 || str.length > 1024) {\n    return false;\n  }\n\n  return true;\n};\n\nproto._isTopic = function (str) {\n  if (!is.string(str) || str.trim().length === 0 || str.length > 128) {\n    return false;\n  }\n\n  return true;\n};\n\nproto._isSignature = function (arr) {\n  var _this2 = this;\n\n  var tag = true;\n\n  if (!is.array(arr) || arr.length === 0) {\n    tag = false;\n    return tag;\n  }\n\n  arr.some(function (item) {\n    if (!is.object(item)) {\n      tag = false;\n      return true;\n    }\n\n    if (!item.signData || !item.publicKey) {\n      tag = false;\n      return true;\n    }\n\n    if (!_this2._isHexString(item.signData)) {\n      tag = false;\n      return true;\n    }\n\n    if (!keypair.checkEncPublicKey(item.publicKey)) {\n      tag = false;\n      return true;\n    }\n  });\n  return tag;\n};\n\nproto._isOperation = function (arr) {\n  var tag = true;\n\n  if (!is.array(arr) || arr.length === 0) {\n    tag = false;\n    return tag;\n  }\n\n  arr.some(function (item) {\n    if (!is.object(item)) {\n      tag = false;\n      return true;\n    }\n\n    if (!item.type || !item.data) {\n      tag = false;\n      return true;\n    }\n  });\n  return tag;\n};\n\nproto._isPrivateKeys = function (arr) {\n  var tag = true;\n\n  if (!is.array(arr) || arr.length === 0) {\n    tag = false;\n    return tag;\n  }\n\n  arr.some(function (item) {\n    if (!keypair.checkEncPrivateKey(item)) {\n      tag = false;\n      return true;\n    }\n  });\n  return tag;\n};\n/**\n *\n * @param obj\n * @param schema\n * @returns {boolean}\n * @private\n *\n * eg:\n    schema: {\n      required: false,\n      string: true,\n      address: true,\n      numeric: true,\n    }\n */\n\n\nproto._validate = function (obj, schema) {\n  var _this3 = this;\n\n  var tag = true;\n  var msg = '';\n\n  if (!is.object(obj) || !is.object(schema)) {\n    tag = false;\n    msg = 'INVALID_NUMBER_OF_ARG';\n    return {\n      tag: tag,\n      msg: msg\n    };\n  }\n\n  Object.keys(schema).some(function (item) {\n    // required is true\n    if (schema[item].required && is.undefined(obj[item])) {\n      obj[item] = '';\n    } // numeric is true\n\n\n    if (!is.undefined(obj[item]) && schema[item].numeric && !_this3._verifyValue(obj[item])) {\n      tag = false;\n\n      switch (item) {\n        case 'amount':\n          msg = 'INVALID_BU_AMOUNT_ERROR';\n          break;\n\n        case 'buAmount':\n          msg = 'INVALID_BU_AMOUNT_ERROR';\n          break;\n\n        case 'assetAmount':\n          msg = 'INVALID_ASSET_AMOUNT_ERROR';\n          break;\n\n        case 'gasPrice':\n          msg = 'INVALID_GASPRICE_ERROR';\n          break;\n\n        case 'feeLimit':\n          msg = 'INVALID_FEELIMIT_ERROR';\n          break;\n\n        case 'ceilLedgerSeq':\n          msg = 'INVALID_CEILLEDGERSEQ_ERROR';\n          break;\n\n        case 'nonce':\n          msg = 'INVALID_NONCE_ERROR';\n          break;\n\n        case 'initBalance':\n          msg = 'INVALID_INITBALANCE_ERROR';\n          break;\n\n        case 'signtureNumber':\n          msg = 'INVALID_SIGNATURENUMBER_ERROR';\n          break;\n\n        case 'totalSupply':\n          msg = 'INVALID_TOKEN_TOTALSUPPLY_ERROR';\n          break;\n\n        case 'tokenAmount':\n          msg = 'INVALID_TOKEN_AMOUNT_ERROR';\n          break;\n\n        default:\n          msg = 'INVALID_ARGUMENTS';\n      }\n\n      return true;\n    } // privateKeys is true\n\n\n    if (!is.undefined(obj[item]) && schema[item].privateKeys && !_this3._isPrivateKeys(obj[item])) {\n      tag = false;\n      msg = \"PRIVATEKEY_ONE_ERROR\";\n      return true;\n    } // address is true\n\n\n    if (!is.undefined(obj[item]) && schema[item].address && !keypair.checkAddress(obj[item])) {\n      tag = false;\n\n      switch (item) {\n        case 'sourceAddress':\n          msg = 'INVALID_SOURCEADDRESS_ERROR';\n          break;\n\n        case 'destAddress':\n          msg = 'INVALID_DESTADDRESS_ERROR';\n          break;\n\n        case 'issuer':\n          msg = 'INVALID_ISSUER_ADDRESS_ERROR';\n          break;\n\n        case 'address':\n          msg = 'INVALID_ADDRESS_ERROR';\n          break;\n\n        case 'contractAddress':\n          msg = 'INVALID_CONTRACTADDRESS_ERROR';\n          break;\n\n        case 'fromAddress':\n          msg = 'INVALID_FROMADDRESS_ERROR';\n          break;\n\n        case 'spender':\n          msg = 'INVALID_SPENDER_ERROR';\n          break;\n\n        case 'tokenOwner':\n          msg = 'INVALID_TOKENOWNER_ERRPR';\n          break;\n\n        default:\n          msg = 'INVALID_ARGUMENTS';\n      }\n\n      return true;\n    } // operations is true\n\n\n    if (!is.undefined(obj[item]) && schema[item].operations && !_this3._isOperation(obj[item])) {\n      tag = false;\n      msg = 'INVALID_OPERATIONS';\n      return true;\n    } // signatures is true\n\n\n    if (!is.undefined(obj[item]) && schema[item].signatures && !_this3._isSignature(obj[item])) {\n      tag = false;\n      msg = 'INVALID_SIGNATURE_ERROR';\n      return true;\n    } // hex is true\n\n\n    if (!is.undefined(obj[item]) && schema[item].hex && !_this3._isHexString(obj[item])) {\n      tag = false;\n\n      switch (item) {\n        case 'metadata':\n          msg = 'METADATA_NOT_HEX_STRING_ERROR';\n          break;\n\n        case 'blob':\n          msg = 'INVALID_BLOB_ERROR';\n          break;\n\n        default:\n          msg = 'METADATA_NOT_HEX_STRING_ERROR';\n      }\n\n      return true;\n    } // string is true\n\n\n    if (!is.undefined(obj[item]) && schema[item].string && !_this3._isString(obj[item])) {\n      tag = false;\n\n      switch (item) {\n        case 'code':\n          msg = 'INVALID_ASSET_CODE_ERROR';\n          break;\n\n        case 'issuer':\n          msg = 'INVALID_ISSUER_ADDRESS_ERROR';\n          break;\n\n        case 'data':\n          msg = 'INVALID_LOG_DATA_ERROR';\n          break;\n\n        case 'metadata':\n          msg = 'INVALID_METADATA_ERROR';\n          break;\n\n        case 'payload':\n          msg = 'PAYLOAD_EMPTY_ERROR';\n          break;\n\n        case 'input':\n          msg = 'INVALID_INPUT_ERROR';\n          break;\n\n        case 'name':\n          msg = 'INVALID_TOKEN_NAME_ERROR';\n          break;\n\n        case 'symbol':\n          msg = 'INVALID_TOKEN_SYMBOL_ERROR';\n          break;\n\n        case 'key':\n          msg = 'INVALID_DATAKEY_ERROR';\n          break;\n\n        default:\n          msg = 'INVALID_ARGUMENTS';\n      }\n\n      return true;\n    } // topic is true\n\n\n    if (!is.undefined(obj[item]) && schema[item].topic && !_this3._isTopic(obj[item])) {\n      tag = false;\n      msg = 'INVALID_LOG_TOPIC_ERROR';\n      return true;\n    } // boolean is true\n\n\n    if (!is.undefined(obj[item]) && schema[item].boolean && typeof obj[item] !== 'boolean') {\n      tag = false;\n\n      switch (item) {\n        case 'deleteFlag':\n          msg = 'INVALID_DELETEFLAG_ERROR';\n          break;\n\n        default:\n          msg = 'INVALID_ARGUMENTS';\n      }\n\n      return true;\n    }\n  });\n  return {\n    tag: tag,\n    msg: msg\n  };\n};\n\nproto._bufToHex = function (buf) {\n  var utf8Str = buf.toString('utf8');\n  return Buffer.from(utf8Str, 'utf8').toString('hex');\n};\n\nproto._bigNumberToString = function (obj, base) {\n  // setup base\n  base = base || 10; // check if obj is type object, not an array and does not have BN properties\n\n  if (typeof obj === 'object' && obj !== null && !Array.isArray(obj) && !('lessThan' in obj)) {\n    // move through plain object\n    Object.keys(obj).forEach(function (key) {\n      // recurively converty item\n      obj[key] = proto._bigNumberToString(obj[key], base);\n    });\n  } // obj is an array\n\n\n  if (Array.isArray(obj)) {\n    // convert items in array\n    obj = obj.map(function (item) {\n      // convert item to a string if bignumber\n      return proto._bigNumberToString(item, base);\n    });\n  } // if obj is number, convert to string\n\n\n  if (typeof obj === 'number') return obj + ''; // if not an object bypass\n\n  if (typeof obj !== 'object' || obj === null) return obj; // if the object to does not have BigNumber properties, bypass\n\n  if (!('toString' in obj) || !('lessThan' in obj)) return obj; // if object has bignumber properties, convert to string with base\n\n  return obj.toString(base);\n};\n\nproto._longToInt = function (obj) {\n  // check if obj is type object, not an array and does not have long properties\n  if (typeof obj === 'object' && obj !== null && !Array.isArray(obj) && !('low' in obj)) {\n    // move through plain object\n    Object.keys(obj).forEach(function (key) {\n      // recurively converty item\n      obj[key] = proto._longToInt(obj[key]);\n    });\n  } // obj is an array\n\n\n  if (Array.isArray(obj)) {\n    // convert items in array\n    obj = obj.map(function (item) {\n      // convert item to an int if long\n      return proto._longToInt(item);\n    });\n  } // if not an object bypass\n\n\n  if (typeof obj !== 'object' || obj === null) return obj; // if the object to does not have long properties, bypass\n\n  if (!('low' in obj)) return obj; // if object has long properties, convert to int\n\n  return long.fromValue(obj).toInt();\n};\n\nproto._isContractAddress =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee6(address) {\n  var data, result;\n  return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return this._request('get', 'getAccount', {\n            address: address\n          });\n\n        case 2:\n          data = _context6.sent;\n\n          if (!(data.error_code !== 0)) {\n            _context6.next = 5;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", this._responseError(errors.ACCOUNT_NOT_EXIST));\n\n        case 5:\n          result = data.result;\n\n          if (!result.contract) {\n            _context6.next = 8;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", true);\n\n        case 8:\n          return _context6.abrupt(\"return\", false);\n\n        case 9:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _callee6, this);\n});\nproto._isAvailableToken =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee7(contractAddress) {\n  var isContractAddress, data, contract, metadatas, key, value, info, schema;\n  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (keypair.checkAddress(contractAddress)) {\n            _context7.next = 2;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", this._responseError(errors.INVALID_CONTRACTADDRESS_ERROR));\n\n        case 2:\n          _context7.next = 4;\n          return this._isContractAddress(contractAddress);\n\n        case 4:\n          isContractAddress = _context7.sent;\n\n          if (isContractAddress) {\n            _context7.next = 7;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", this._responseError(errors.CONTRACTADDRESS_NOT_CONTRACTACCOUNT_ERROR));\n\n        case 7:\n          _context7.next = 9;\n          return this._request('get', 'getAccount', {\n            address: contractAddress\n          });\n\n        case 9:\n          data = _context7.sent;\n\n          if (!(data.error_code !== 0)) {\n            _context7.next = 12;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", this._responseData({\n            isValid: false\n          }));\n\n        case 12:\n          data = data.result;\n          contract = data.contract.metadatas;\n          metadatas = data.metadatas;\n          key = '';\n          value = '';\n\n          if (!(metadatas && is.array(metadatas))) {\n            _context7.next = 32;\n            break;\n          }\n\n          metadatas.some(function (item) {\n            if (item.key === 'global_attribute') {\n              key = 'global_attribute';\n              value = item.value;\n              return true;\n            }\n          });\n\n          if (!(key !== 'global_attribute')) {\n            _context7.next = 21;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", this._responseData({\n            isValid: false\n          }));\n\n        case 21:\n          info = JSON.parse(value);\n\n          if (!('1.0' !== info.ctp)) {\n            _context7.next = 24;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", this._responseData({\n            isValid: false\n          }));\n\n        case 24:\n          if (!(!info.symbol || info.symbol < 0 || info.symbol > 8)) {\n            _context7.next = 26;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", this._responseData({\n            isValid: false\n          }));\n\n        case 26:\n          schema = {\n            balance: {\n              required: true,\n              numeric: true\n            },\n            name: {\n              required: true,\n              string: true\n            },\n            symbol: {\n              required: true,\n              string: true\n            },\n            totalSupply: {\n              required: true,\n              numeric: true\n            },\n            contractOwner: {\n              required: true,\n              address: true\n            }\n          };\n\n          if (this._validate(info, schema).tag) {\n            _context7.next = 29;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", this._responseData({\n            isValid: false\n          }));\n\n        case 29:\n          return _context7.abrupt(\"return\", this._responseData({\n            isValid: true\n          }));\n\n        case 32:\n          return _context7.abrupt(\"return\", this._responseData({\n            isValid: false\n          }));\n\n        case 33:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _callee7, this);\n});","map":null,"metadata":{},"sourceType":"script"}